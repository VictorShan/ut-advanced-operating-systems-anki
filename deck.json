{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "4f8e0a7c-be83-11ee-862a-37a7848dbfde",
    "deck_config_uuid": "4f8e0eb4-be83-11ee-862a-37a7848dbfde",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "answerAction": 0,
            "autoplay": true,
            "buryInterdayLearning": true,
            "crowdanki_uuid": "4f8e0eb4-be83-11ee-862a-37a7848dbfde",
            "desiredRetention": 0.9,
            "dyn": false,
            "fsrsWeights": [],
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 50
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 4,
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 500
            },
            "reviewOrder": 0,
            "secondsToShowAnswer": 0.0,
            "secondsToShowQuestion": 0.0,
            "sm2Retention": 0.9,
            "stopTimerOnAnswer": false,
            "timer": 0,
            "waitForAudio": true,
            "weightSearch": ""
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "ut-advanced-operating-systems",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -1775170061518984044,
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -8523269344021767259,
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic",
            "originalStockKind": 1,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": 4264313413014856120,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n.cloze {\n    font-weight: bold;\n    color: blue;\n}\n.nightMode .cloze {\n    color: lightblue;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -933311556917618499,
                    "name": "Text",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": true,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": 0
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -3374072642069009193,
                    "name": "Back Extra",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": 1
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Cloze",
            "originalStockKind": 5,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}<br><br>\n{{Back Extra}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": -6660205170811910628,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}"
                }
            ],
            "type": 1
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "b21fbb46-c337-11ee-ba01-25ef8c141b52",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -4464610948833463727,
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": 6587438057748758503,
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic (type in the answer)",
            "originalStockKind": 3,
            "req": [
                [
                    0,
                    "any",
                    [
                        0,
                        1
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{Front}}\n\n<hr id=answer>\n\n{{type:Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": -4896926577839365357,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}\n\n{{type:Back}}"
                }
            ],
            "type": 0
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "Sort in ascending order by access speed: RAM, Hard Disk, Registers, Cache",
                "Registers &gt; Cache &gt; RAM &gt; Hard Disk"
            ],
            "guid": "o;8m*L<qzT",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Is Multiplexing (sharing) hardware resources between applications a function of the OS?",
                "Yes, Multiplexing (sharing) hardware resources between applications a function of the OS"
            ],
            "guid": "p|S3d^}t]3",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How does a user process run system commands?",
                "It switches into kernel mode to run system calls"
            ],
            "guid": "kjMohNpR{s",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Where is the information in the registers stored during a context switch?",
                "On the stack"
            ],
            "guid": "Q!n,fW5iO#",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Why don't we have a layer between a process and execution on the processor?",
                "Speed but less safe.<br><br>Not having a layer in between means that processes will have fast direct access to the hardware but not have the safety that having that layer can provide."
            ],
            "guid": "u&hR3u~:&@",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In order for the processors to \"run multiple processes at once\", it is actually using {{c1::Limited Direct Execution::3 words}} for {{c2::time sharing::2 words}}.",
                ""
            ],
            "guid": "w&Ot$3XfWg",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Heaps grows&nbsp;{{c1::up::up/down}} in address space",
                ""
            ],
            "guid": "N)f^Y?^OxT",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "A stack grows {{c1::down::up/down}} in address space",
                ""
            ],
            "guid": "JClBH$RWuo",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(237, 51, 59);\">Not</span> adding a layer between the process and the hardware {{c1::increases::increases/decreases}} speed and {{c1::decreases::increases/decreases}} safety",
                "Not having a layer in between means that processes will have fast direct access to the hardware but not have the safety that having that layer can provide."
            ],
            "guid": "MD;27%?;eh",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::timer}} interrupt prevents long running processes from hogging resources",
                ""
            ],
            "guid": "M.qpr`4I:V",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The process usually runs in&nbsp;{{c1::user}} mode but runs in {{c2::kernel}} mode when running system calls",
                "Kernel mode is a \"Privileged State\" that starts off setting up the process before handing it off to user mode."
            ],
            "guid": "sbgfZt~v^}",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The interrupt handler can only be changed in {{c1::kernel}} mode",
                ""
            ],
            "guid": "K20[(OIZ}|",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "System calls from {{c1::user::user/kernel}} mode invoke&nbsp;{{c2::trap}}s that tell the OS to run something in&nbsp;{{c3::kernel::user/kernel}} mode",
                "System looks at the trap table and where the call's arguments are stored to know what to do"
            ],
            "guid": "vv7-R;iV}o",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which register tracks the next instruction?",
                "eip"
            ],
            "guid": "P~1Z[:a2(l",
            "note_model_uuid": "b21fbb46-c337-11ee-ba01-25ef8c141b52",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::ebp}} register can be used to traverse back the chain of function calls",
                ""
            ],
            "guid": "hJR$?3yygA",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What order do programs compile? (Assembler, Compiler, Linker, Loader)",
                "Compiler -&gt; Assembler -&gt; Linker -&gt; Loader"
            ],
            "guid": "d;6h;xW2?h",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "During the start of a function call, a copy of&nbsp;{{c1::ebp::register}} is saved and {{c1::ebp::register}} is overwritten with&nbsp;{{c2::esp::register}}",
                "esp is the stack pointer<br>ebp is the stack frame"
            ],
            "guid": "Grp,E0lvi5",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::strace::Program}} is used to look at system calls a process executes",
                ""
            ],
            "guid": "u6,9I.zR}/",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Timer interrupts}} are used to allow the OS to run when there are long running processes",
                "If it didn't get interrupted, the process could potentially run forever and never exit"
            ],
            "guid": "cAx1EJ[;#:",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::stack}} and the&nbsp;{{c1::heap}} are shared when performing a context switch. Most {{c2::registers}} are shared so their data needs to be saved during context swtiches",
                ""
            ],
            "guid": "APwHAo:f~Y",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c2::Limited Direct Execution}} is a way for the OS to do&nbsp;{{c1::time sharing}}",
                ""
            ],
            "guid": "pWt*?g5&x]",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::eax}} register holds the&nbsp;{{c2::return value of a function}}",
                ""
            ],
            "guid": "FR8DCHf.`s",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Traps::Traps/Interrupts}} occur when a user program makes a system call or results in an exception; {{c1::Interrupts::Traps/Interrupts}} are initiated by hardware devices",
                ""
            ],
            "guid": "FD<r=|>h_O",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Running time::Metric}}, {{c2::throughput::metric}},&nbsp; {{c3::fairness::metric}},&nbsp;{{c6::turnaround time}}, and&nbsp;{{c4::response time}} are metrics used to evaulate {{c5::scheduling policies}}",
                "Running time = Actual time the process is running<br>Throughput = Time per process<br>Fairness = Are processes being starved?<br>Response Time = Time to first execution<br>Turnaround time = Total time taken to execute a particular process (including wait)"
            ],
            "guid": "PJ6}m!xJv1",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::FIFO::Scheduling policy}} can have a high {{c2::response time::metric}} in the case where there is a long process followed by short process",
                "If the short process is interactive, that means the user could be waiting for a long time before they can interact again.<br><br>Turnaround time == response time"
            ],
            "guid": "Ayw^!:s_;n",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::SJF::Scheduling policy}} is great for&nbsp;{{c2::response time::metric}} but is dependent on the arrival time of processes",
                "SJF = Shortest Job First<br>This is ideal if all jobs arrive at the same time. If they come sequentially, then it will be the same as FIFO"
            ],
            "guid": "xN7^weKmmu",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::SJCF::Scheduling policy}} will context switch from larger jobs to finish smaller ones first",
                "SJCF = Shortest Job Completed First<br>Determines which jobs are \"larger\" by running time left<br><br>"
            ],
            "guid": "Opj,fReeX%",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The {{c1::Round Robin}} scheduling policy is very fair because every process gets a set amount of time each iteration",
                "Not good response time because it can take a long time for a job to finish if there are many different jobs that all need to execute a bit before we come back to the first one"
            ],
            "guid": "PPKON6`VN0",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Pre-emptive scheduling}} is when a kernel scheduler de-schedules a process post&nbsp;{{c2::timer interrupt}} and schedules another process",
                "Will need to use context switch"
            ],
            "guid": "qD]CCC%hyB",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When a user space process issues an I/O call, another process&nbsp;{{c1::can::can/cannot}} be scheduled to utilize idle CPU. This&nbsp;{{c2::is not::is/is not}} preemptive scheduling",
                "This is not preemptive scheduling since the OS didn’t stop the user space process from executing further, it was just the fact that the process was waiting for some I/O which allowed the other process to be scheduled."
            ],
            "guid": "hg,h#<j4X@",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::fairness::scheduling metric}} metric considers&nbsp;{{c2::resource allocation}},&nbsp;{{c3::starvation}},&nbsp;{{c4::priority and preemption}},&nbsp;{{c5::scheduling algorithm}} and&nbsp;{{c6::response time for interactive users}}",
                ""
            ],
            "guid": "q:c!`#D^!>",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Response times&nbsp;{{c1::increases::increases/decreases/stays the same}} in SJF as job lengths increase",
                "SJF = Shortest Job First"
            ],
            "guid": "yZ$y1N/Z[~",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Response times&nbsp;{{c1::increases::increases/decreases/stays the same}} in RR as time slice lengths are increased",
                "RR = Round Robin"
            ],
            "guid": "Ra(hnR|-9y",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Response time::Scheduling metric}} is the time from arrival to first execution while&nbsp;{{c2::turnaround time::scheduling metric}} is the time from arrival to process completion",
                ""
            ],
            "guid": "A;#9rKGFW)",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "There&nbsp;{{c1::is not::is/is not}} a scheduling policy that has both better response times and turnaround times than FIFO, SJF, SJCF, and RR",
                "This is a classic trade-off space and any scheduler which does well in turnaround time metric would perform poorly for response times; moreover a scheduler which does well for some workloads would perform poorly for some other workloads."
            ],
            "guid": "m_N~$Cmew>",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": []
        }
    ],
    "reviewLimit": null,
    "reviewLimitToday": null
}