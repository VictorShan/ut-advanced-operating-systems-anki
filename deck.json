{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "4f8e0a7c-be83-11ee-862a-37a7848dbfde",
    "deck_config_uuid": "4f8e0eb4-be83-11ee-862a-37a7848dbfde",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "answerAction": 0,
            "autoplay": true,
            "buryInterdayLearning": true,
            "crowdanki_uuid": "4f8e0eb4-be83-11ee-862a-37a7848dbfde",
            "desiredRetention": 0.9,
            "dyn": false,
            "fsrsWeights": [],
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 50
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 4,
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 500
            },
            "reviewOrder": 0,
            "secondsToShowAnswer": 0.0,
            "secondsToShowQuestion": 0.0,
            "sm2Retention": 0.9,
            "stopTimerOnAnswer": false,
            "timer": 0,
            "waitForAudio": true,
            "weightSearch": ""
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "ut-advanced-operating-systems",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -1775170061518984044,
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -8523269344021767259,
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic",
            "originalStockKind": 1,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": 4264313413014856120,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n.cloze {\n    font-weight: bold;\n    color: blue;\n}\n.nightMode .cloze {\n    color: lightblue;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -933311556917618499,
                    "name": "Text",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": true,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": 0
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -3374072642069009193,
                    "name": "Back Extra",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": 1
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Cloze",
            "originalStockKind": 5,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}<br><br>\n{{Back Extra}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": -6660205170811910628,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}"
                }
            ],
            "type": 1
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "b21fbb46-c337-11ee-ba01-25ef8c141b52",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -4464610948833463727,
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": 6587438057748758503,
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic (type in the answer)",
            "originalStockKind": 3,
            "req": [
                [
                    0,
                    "any",
                    [
                        0,
                        1
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{Front}}\n\n<hr id=answer>\n\n{{type:Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": -4896926577839365357,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}\n\n{{type:Back}}"
                }
            ],
            "type": 0
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "Sort in ascending order by access speed: RAM, Hard Disk, Registers, Cache",
                "Registers &gt; Cache &gt; RAM &gt; Hard Disk"
            ],
            "guid": "o;8m*L<qzT",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Is Multiplexing (sharing) hardware resources between applications a function of the OS?",
                "Yes, Multiplexing (sharing) hardware resources between applications a function of the OS"
            ],
            "guid": "p|S3d^}t]3",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How does a user process run system commands?",
                "It switches into kernel mode to run system calls"
            ],
            "guid": "kjMohNpR{s",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Where is the information in the registers stored during a context switch?",
                "On the stack"
            ],
            "guid": "Q!n,fW5iO#",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Why don't we have a layer between a process and execution on the processor?",
                "Speed but less safe.<br><br>Not having a layer in between means that processes will have fast direct access to the hardware but not have the safety that having that layer can provide."
            ],
            "guid": "u&hR3u~:&@",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In order for the processors to \"run multiple processes at once\", it is actually using {{c1::Limited Direct Execution::3 words}} for {{c2::time sharing::2 words}}.",
                ""
            ],
            "guid": "w&Ot$3XfWg",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Heaps grows&nbsp;{{c1::up::up/down}} in address space",
                ""
            ],
            "guid": "N)f^Y?^OxT",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "A stack grows {{c1::down::up/down}} in address space",
                ""
            ],
            "guid": "JClBH$RWuo",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(237, 51, 59);\">Not</span> adding a layer between the process and the hardware {{c1::increases::increases/decreases}} speed and {{c1::decreases::increases/decreases}} safety",
                "Not having a layer in between means that processes will have fast direct access to the hardware but not have the safety that having that layer can provide."
            ],
            "guid": "MD;27%?;eh",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::timer}} interrupt prevents long running processes from hogging resources",
                ""
            ],
            "guid": "M.qpr`4I:V",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The process usually runs in&nbsp;{{c1::user}} mode but runs in {{c2::kernel}} mode when running system calls",
                "Kernel mode is a \"Privileged State\" that starts off setting up the process before handing it off to user mode."
            ],
            "guid": "sbgfZt~v^}",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The interrupt handler can only be changed in {{c1::kernel}} mode",
                ""
            ],
            "guid": "K20[(OIZ}|",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "System calls from {{c1::user::user/kernel}} mode invoke&nbsp;{{c2::trap}}s that tell the OS to run something in&nbsp;{{c3::kernel::user/kernel}} mode",
                "System looks at the trap table and where the call's arguments are stored to know what to do"
            ],
            "guid": "vv7-R;iV}o",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which register tracks the next instruction?",
                "eip"
            ],
            "guid": "P~1Z[:a2(l",
            "note_model_uuid": "b21fbb46-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::ebp}} register can be used to traverse back the chain of function calls",
                ""
            ],
            "guid": "hJR$?3yygA",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What order do programs compile? (Assembler, Compiler, Linker, Loader)",
                "Compiler -&gt; Assembler -&gt; Linker -&gt; Loader"
            ],
            "guid": "d;6h;xW2?h",
            "note_model_uuid": "4f8e16d4-be83-11ee-862a-37a7848dbfde",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "During the start of a function call, a copy of&nbsp;{{c1::ebp::register}} is saved and {{c1::ebp::register}} is overwritten with&nbsp;{{c2::esp::register}}",
                "esp is the stack pointer<br>ebp is the stack frame"
            ],
            "guid": "Grp,E0lvi5",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::strace::Program}} is used to look at system calls a process executes",
                ""
            ],
            "guid": "u6,9I.zR}/",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Timer interrupts}} are used to allow the OS to run when there are long running processes",
                "If it didn't get interrupted, the process could potentially run forever and never exit"
            ],
            "guid": "cAx1EJ[;#:",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::stack}} and the&nbsp;{{c1::heap}} are shared when performing a context switch. Most {{c2::registers}} are shared so their data needs to be saved during context switches",
                ""
            ],
            "guid": "APwHAo:f~Y",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c2::Limited Direct Execution::Specific thing}} is a way for the OS to do&nbsp;{{c1::time sharing}}",
                ""
            ],
            "guid": "pWt*?g5&x]",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::eax}} register holds the&nbsp;{{c2::return value of a function}}",
                ""
            ],
            "guid": "FR8DCHf.`s",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Traps::Traps/Interrupts}} occur when a user program makes a system call or results in an exception; {{c1::Interrupts::Traps/Interrupts}} are initiated by hardware devices",
                ""
            ],
            "guid": "FD<r=|>h_O",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Running time::Metric}}, {{c2::throughput::metric}},&nbsp; {{c3::fairness::metric}},&nbsp;{{c6::turnaround time}}, and&nbsp;{{c4::response time}} are metrics used to evaulate {{c5::scheduling policies}}",
                "Running time = Actual time the process is running<br>Throughput = Time per process<br>Fairness = Are processes being starved?<br>Response Time = Time to first execution<br>Turnaround time = Total time taken to execute a particular process (including wait)"
            ],
            "guid": "PJ6}m!xJv1",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::FIFO::Scheduling policy}} can have a high {{c2::response time::metric}} in the case where there is a long process followed by short process",
                "If the short process is interactive, that means the user could be waiting for a long time before they can interact again.<br><br>Turnaround time == response time"
            ],
            "guid": "Ayw^!:s_;n",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::SJF::Scheduling policy}} is great for&nbsp;{{c2::response time::metric}} but is dependent on the arrival time of processes",
                "SJF = Shortest Job First<br>This is ideal if all jobs arrive at the same time. If they come sequentially, then it will be the same as FIFO"
            ],
            "guid": "xN7^weKmmu",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::SJCF::Scheduling policy}} will context switch from larger jobs to finish smaller ones first",
                "SJCF = Shortest Job Completed First<br>Determines which jobs are \"larger\" by running time left<br><br>"
            ],
            "guid": "Opj,fReeX%",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The {{c1::Round Robin}} scheduling policy is very fair because every process gets a set amount of time each iteration",
                "Not good response time because it can take a long time for a job to finish if there are many different jobs that all need to execute a bit before we come back to the first one"
            ],
            "guid": "PPKON6`VN0",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Pre-emptive scheduling}} is when a kernel scheduler de-schedules a process post&nbsp;{{c2::timer interrupt::some event}} and schedules another process",
                "Will need to use context switch"
            ],
            "guid": "qD]CCC%hyB",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When a user space process issues an I/O call, another process&nbsp;{{c1::can::can/cannot}} be scheduled to utilize idle CPU. This&nbsp;{{c2::is not::is/is not}} preemptive scheduling",
                "This is not preemptive scheduling since the OS didn’t stop the user space process from executing further, it was just the fact that the process was waiting for some I/O which allowed the other process to be scheduled."
            ],
            "guid": "hg,h#<j4X@",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::fairness::scheduling metric}} metric considers&nbsp;{{c2::resource allocation}},&nbsp;{{c3::starvation}},&nbsp;{{c4::priority and preemption}},&nbsp;{{c5::scheduling algorithm}} and&nbsp;{{c6::response time for interactive users}}",
                ""
            ],
            "guid": "q:c!`#D^!>",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Response times&nbsp;{{c1::increases::increases/decreases/stays the same}} in SJF as job lengths increase",
                "SJF = Shortest Job First"
            ],
            "guid": "yZ$y1N/Z[~",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Response times&nbsp;{{c1::increases::increases/decreases/stays the same}} in Round Robin as time slice lengths are increased",
                ""
            ],
            "guid": "Ra(hnR|-9y",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Response time::Scheduling metric}} is the time from arrival to first execution while&nbsp;{{c2::turnaround time::scheduling metric}} is the time from arrival to process completion",
                ""
            ],
            "guid": "A;#9rKGFW)",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "There&nbsp;{{c1::is not::is/is not}} a scheduling policy that has both better response times and turnaround times than FIFO, SJF, SJCF, and RR",
                "This is a classic trade-off space and any scheduler which does well in turnaround time metric would perform poorly for response times; moreover a scheduler which does well for some workloads would perform poorly for some other workloads."
            ],
            "guid": "m_N~$Cmew>",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "scheduler"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In&nbsp;{{c1::CFS::scheduling policy}}, a&nbsp;{{c2::heap::data structure}} is used to track the process with the least&nbsp;{{c3::virtual runtime::metric}} to run next",
                "CFS&nbsp; = Completely Fair Scheduler (used in linux kernel)"
            ],
            "guid": "EQV2taxA*W",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "linux-kernel",
                "scheduler"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Virtual runtime::Metric}} is calculated from the&nbsp;{{c2::execution time::metric}} and ideal&nbsp;{{c2::execution time::metric}}",
                "CFS (completely fair scheduler) tries to get the process that was executed the least (lowest VR)<br><br>Additional factors that priority, how many processes are trying to use, how much the processes actually ran, etc. also affect the VR value"
            ],
            "guid": "Bt;ER3cP2J",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "linux-kernel",
                "scheduler"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When you open a file, the file descriptor will be the&nbsp;{{c1::smallest::random/biggest/smallest}} available number",
                "By default, STDIN is 0, STDOUT is 1, STDERR is 2. You can replace STDOUT by closing that file and opening a different file (which will default to smallest available number 1)"
            ],
            "guid": "c)[;bNJ4+T",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "threads"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Every thread has its own&nbsp;{{c1::eip}},&nbsp;{{c2::stack}}, and {{c3::registers}} but they share a&nbsp;{{c4::heap}}",
                "eip = Instruction Pointer"
            ],
            "guid": "FAdRlVo.+]",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "threads"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "You&nbsp;{{c1::have to::have to/don't have to}} do context switches for threads",
                "You can only run one thread at a time on a physical processor"
            ],
            "guid": "fJGA){5sxO",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "threads"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Reasons to use&nbsp;{{c1::threads}} include higher {{c2::parallelism}} and more efficiently running {{c3::blocking}} operations",
                "It offers more parallelism because thread context switches have less overhead than full process context switches (putting process to sleep, selecting another process, etc)<br><br>IO ops can be more efficient when the process has blocking actions (disk reads) that take a system call where another thread can take over"
            ],
            "guid": "b_}V!k:S=0",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "threads"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Threads&nbsp;{{c1::are not::are/are not}} run in the same order they are spawned, which causes&nbsp;{{c2::race conditions::phenomenon}}",
                "The order threads are run depends on what the scheduler decides"
            ],
            "guid": "p.R?M<xGKW",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "threads"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The processor has an {{c1::event loop}} that runs&nbsp;{{c2::forever}} and does not cause&nbsp;{{c3::data races}} because the OS is not scheduling anything",
                "Th event loop performs first part of large task and places the rest as an event in a&nbsp;queue to be performed later"
            ],
            "guid": "tiRjy-2;W[",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Using user space scheduling (like&nbsp;{{c1::event loop}}) can be more efficient than OS scheduling and is&nbsp;{{c2::more::more/less}} complex",
                "Applications can schedule instead of the OS. Is more complex because you have to pause and resume processes.&nbsp;"
            ],
            "guid": "os*C[%sp-*",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "events"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Spawning threads can be/is&nbsp;{{c1::expensive::cheap/expensive}} so you can keep a&nbsp;{{c2::pool of threads}} constantly running",
                ""
            ],
            "guid": "zq194|KgPz",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "threads"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Nginx uses&nbsp;{{c1::events::threads/events}}",
                ""
            ],
            "guid": "zUZA*0J;-|",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization",
                "events",
                "threads"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Mutual execution::Idea}} is using&nbsp;{{c2::locks}} to control which processes/threads can read/write to data using {{c3::CAS::hardware primitive}}",
                "CAS = Compare And Swap (View lock, is free?, lock) in one operation, if 2 operations than there can be race conditions"
            ],
            "guid": "Hg@hr)K-^;",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "cpu-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Each process has an&nbsp;{{c1::isolated::shared/isolated}} and {{c2::identical::identical/different}} address range",
                "This means processes can't interfere with each other, can't view another's data, and have predictable address spaces"
            ],
            "guid": "Fvr_O;I>Jc",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Virtual}} system calls avoid doing a full context switch because they are called with&nbsp;{{c2::read-only::read-only/write-only/read-write/no}} access that can be called in {{c3::user::user/kernel}}-space",
                "Example includes minor things like getting current datetime which uses a virtual variable to access value"
            ],
            "guid": "lI]H$&-`pl",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::VDSO}} has better security and is not limited in size",
                "Virtual Dynamic Shared Objects do not have fixed addresses allowing for better flexibility and security"
            ],
            "guid": "?5pRGKj}J",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Bugs in code/Malicious code can cause accesses/writes to another process' memory when using&nbsp;{{c1::static relocation::memory virtualization approach}} due to the offset",
                "Static Relocation allocates chunks of memory to a process and uses an offset to determine the real memory. There is no isolation or ability to reorganize memory because they are all in relation to each other"
            ],
            "guid": "K4D{-iu0%y",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In&nbsp;{{c1::static relocation::memory virtualization approach}}, you can only assign a process' memory once",
                "Static relocation only allows you to set the process' memory range once because every process gets a block of memory. There locations are offset by process-wide memory offset"
            ],
            "guid": "N=r}M}|l3D",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::Base and Bounds::memory virtualization approach}} uses two registers to find the block of memory and isolates process memory and&nbsp;{{c2::allows::allows/doesn't allow}} relocating memory",
                "Base and Bounds uses base offset for the memory block and bounds register to define the max memory. Relocating a process memory involves copying memory and updating the two registers to make room for other processes.&nbsp;"
            ],
            "guid": "bIAiFUA!tE",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Both&nbsp;{{c1::static relocation::memory virtualization approach}} and&nbsp;{{c2::base and bound::memory virtualization approach}} {{c3::correctly::correctly/incorrectly}} assumes that a process uses one contiguous block of memory",
                "Most of the process is empty because there is a lot of unused space between the heap, stack and code"
            ],
            "guid": "x@8::n[;;a",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In&nbsp;{{c1::segmentation::memory virtualization approach}} involves splitting the process memory into 3 parts&nbsp;{{c2::code, heap, stack::regions of process memory}}",
                "Each of these segments can be stored separately that are intermixed (P1stack, P2stack, P2heap,P1code...) which allows more of the physical memory to be used"
            ],
            "guid": "iShCg[*`+h",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::segmentation::memory virtualization approach}} is an extension of the {{c2::base and bounds::memory virtualization approach}} except it uses two extra&nbsp;{{c3::registers}} for a memory block to determine {{c4::direction}} and {{c5::permissions}}",
                "An extra register determines the direction to know which way the memory grows (down for stack, up for heap and code). Another register determine permissions for memory segment"
            ],
            "guid": "hef[]+H!VV",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In&nbsp;{{c2::segmentation::memory virtualization approach}}, the {{c1::memory address}} determines whether it is the code, stack or heap",
                "This can be encoded with (first) two bits of the memory address (3 options). This uses very little memory to determine"
            ],
            "guid": "QLxkvO#hC]",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In memory virtualization, all the registers used to keep track of memory blocks are&nbsp;{{c1::saved::saved/lost}} during context switch",
                ""
            ],
            "guid": "F10fn6[,UU",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Fragmentaiton}} is when unallocated memory between allocated blocks that cannot be used but can be fixed/removed by an expensive&nbsp;{{c2::compacting}} operation",
                "Fragmentation usually happens to small chunks of memory.<br>Compacting copies large chunks of memory so they are expensive to perform.<br>Happens in segmentation, base and bounds, and static relocation"
            ],
            "guid": "io&?Tud~Yn",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Heap&nbsp;{{c1::is::is/is not}} often consumed as a growing block",
                "Heap doesn't grow like the stack does.&nbsp; This is because of allocating and deallocating from malloc and free"
            ],
            "guid": "o]Nb-2[!xq",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Using paging, we {{c1::will::will/will not}} need to copy entire stacks/heaps/code around to defragement",
                "This is because we can just allocate unused pages and assign them to a different process so there is no need for widescale copying for defragmentation"
            ],
            "guid": "p6?W{sl2|n",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "A page is usually&nbsp;{{c1::4kb::storage size}} in modern systems",
                ""
            ],
            "guid": "c~YUbFJm^v",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Using pages reduce&nbsp;{{c1::external fragmentation}} but causes {{c2::internal fragmentation}}",
                "There can be fragmentation within pages. Reducing page size reduces fragmentation but increases page table size"
            ],
            "guid": "D:]-}kg612",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "This first part of the virtual address is the&nbsp;{{c3::page directory entry}} followed by the {{c1::page number}} and finally the {{c2::physical memory offset}}",
                "Virtual page is translated to physical page and then the offset is applied.<br><br>10 bits for page directory entry<br>10 bits for paget table entry<br>12 bits for physical offset"
            ],
            "guid": "bj1YKa<5hK",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "A page table includes mappings for {{c1::allocated::allocated/all}} virtual pages",
                "Some virtual addresses may not be mapped to physical pages. There is an extra valid bit column"
            ],
            "guid": "pin:XRKP<^",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The&nbsp;{{c1::OS}} is responsible for allocating and freeing physical pages",
                ""
            ],
            "guid": "sbJC[QW|%C",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "The page table is stored in&nbsp;{{c1::memory}} (located at the address stored in {{c3::PTBR}}) and {{c2::MMU}} uses it to translate from virtual to physical address and read its contents",
                "MMU = Memory Management Unit (Hardware)<br>PTBR = Page Table Base Register points to start of page table (privileged register)"
            ],
            "guid": "i+B8}$EsL;",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "If the page table contains all pages, accessing physical address costs&nbsp;{{c1::2::number}} memory accesses.&nbsp;{{c2::TLB}} solves this this",
                "1. Acccess to get page translation 2. Access to get content at physical address<br>TLB = Translation Lookahead Buffer"
            ],
            "guid": "kC)-9,#I~k",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::TLB}} can be thought of a small cache that's much faster than DRAM",
                "Translation Lookaside Buffer is used to cache page table entries to avoid memory access"
            ],
            "guid": "4ONxGH|(4",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "{{c1::Temporal Locality}} is the tendency for programs to access memory near where it has already read",
                "This is what makes Translation Lookaside Buffer work because it is much smaller and temporal locallity means that the cache entries are used frequently. We avoid looking at page table. Caching is performed in hardware"
            ],
            "guid": "QSLwj6.D/<",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Processes access page tables more often after context switches because the&nbsp;{{c1::TLB}} was flushed",
                "Translation Lookaside Table is flushed during context switches so processes are slower after switches"
            ],
            "guid": "lKdm3j/}%1",
            "note_model_uuid": "b21fc8a2-c337-11ee-ba01-25ef8c141b52",
            "tags": [
                "memory-virtualization",
                "paging"
            ]
        }
    ],
    "reviewLimit": null,
    "reviewLimitToday": null
}